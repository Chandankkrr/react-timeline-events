{"version":3,"sources":["components/Header.tsx","components/Events.tsx","components/Memories.tsx","components/TimelineEvent.tsx","data.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Memory","props","imageSource","title","headerStyles","textStyles","className","style","backgroundImage","Events","events","map","item","index","description","date","image","key","data-date","src","alt","Memories","memories","memory","source","type","href","data-lightbox","TimelineEvent","data","showMemories","year","App","xmlns","viewBox","fill","fill-opacity","d","Header","color","fontSize","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8de54361.chunk.js","sourcesContent":["import React, { CSSProperties } from 'react';\n\ninterface IHeaderProps {\n    imageSource?: string,\n    title?: string,\n    headerStyles?: CSSProperties,\n    textStyles?: CSSProperties,\n};\n\nconst Memory: React.FC<IHeaderProps> = (props: IHeaderProps) => {\n    const { imageSource, title, headerStyles, textStyles } = props;\n\n    return (\n        <header className=\"app-header\" style={{backgroundImage: `url('${imageSource}')`,...headerStyles}}>\n        <h1 style={{...textStyles}}>{title}</h1>\n      </header>\n    )\n}\n\nexport default Memory;\n","import React from 'react';\n\nexport interface IEvent {\n  title: string,\n  description: string\n  date: string,\n  image: string\n};\n\ninterface IEventsProps {\n  events: Array<IEvent>\n};\n\nconst Events: React.FC<IEventsProps> = (props: IEventsProps) => {\n  const { events } = props;\n  return (\n    <ul className=\"timeline\">\n    { events.map((item: IEvent, index: number) => {\n      const { title, description, date, image } = item;\n      return (<li\n      key={`event-${title}`}\n      className=\"event\"\n      data-date={date}\n    >\n      <h1>{title}</h1>\n      <p>{description}</p>\n    { image && <img src={image} alt={title} className=\"image\" /> }\n    </li>)\n    })\n    }\n    </ul>\n  );\n}\n\nexport default Events;","import React from 'react';\n\nexport interface IMemory{\n  title: string,\n    source: string,\n    type: string\n};\n\ninterface IMemoriesProps {\n    memories: Array<IMemory>\n};\n\nconst Memories: React.FC<IMemoriesProps> = (props: IMemoriesProps) => {\n    const { memories } = props;\n    return (\n      <div className=\"img-container\">\n      {memories.map((memory: IMemory, index: number) => {\n        const { title, source, type } = memory;\n            return (\n              <a\n                href={source}\n                data-lightbox=\"homePortfolio\"\n                key={`memory-${title}`}\n                className={type}\n              >\n                <img src={source} alt={title}/>\n              </a>\n            );\n          })}\n      </div>\n    )\n}\n\nexport default Memories;\n","import React from 'react';\nimport Events, { IEvent } from './Events';\nimport Memories, { IMemory } from './Memories';\n\ninterface ITimelineEvent {\n    year: number,\n    events: Array<IEvent>,\n    memories: Array<IMemory>\n}\ninterface ITimelineEventProps {\n    data: Array<ITimelineEvent>,\n    showMemories: boolean,\n};\n\nconst TimelineEvent: React.FC<ITimelineEventProps> = (props: ITimelineEventProps) => {\n    const { data, showMemories } = props;\n    return (\n        <div>\n            {data.map((item: ITimelineEvent, index: number) => {\n                const { events, memories } = item;\n                return(\n                <div key={`data-${index}`}>\n                    <Events\n                        events={events} />\n                    {showMemories && <Memories\n                        memories={memories} />}\n                    </div>\n                )\n            })}\n        </div>\n    );\n}\n\nexport default TimelineEvent;\n","export default [\n   {\n           year: 2010,\n           events: [\n             {\n               title: \"2010\",\n               description: \"\",\n               date: \"\",\n               image: \"\"\n             },\n             {\n               title: \"Instagram\",\n               description: \"Instagram launches on iOS making it the first mobile-only social network and hits 1 million users by year-end\",\n               date: \"\",\n               image: \"https://en.instagram-brand.com/wp-content/uploads/2016/11/Glyph-Icon-hero.png\"\n             },\n             {\n               title: \"Pintrest\",\n               description: \"The photo sharing website launches. Later in 2011, the time magazine listed Pinterest in its '50 Best Websites of 2011'\",\n               date: \"\",\n               image: \"https://business.pinterest.com/sites/default/files/flex_img/2019-02/1-brand-guidelines-01-logo_0.jpg\"\n             },\n           ],\n           memories: [\n             {\n               source: \"https://en.instagram-brand.com/wp-content/uploads/2016/11/Glyph-Icon-hero.png\",\n               type: \"big\",\n               title: 'test'\n             },\n             {\n               source: \"https://business.pinterest.com/sites/default/files/flex_img/2019-02/1-brand-guidelines-01-logo_0.jpg\",\n               type: \"big\",\n               title: 'test 1'\n             },\n           ]\n   },\n   {\n           year: 2011,\n           events: [\n             {\n               title: \"2011\",\n               description: \"\",\n               date: \"\",\n               image: \"\"\n             },\n             {\n               title: \"Snapchat\",\n               description: \"Originally launched a privacy-focused messaging app - hits the internet and the Snapchat effect was born (viewed once, gone forever). Unlike the most social paltform where every post or comment lives on forever, it allowed users to have more control over when and how their messages were consumed\",\n               date: \"\",\n               image: \"https://media.wired.com/photos/5955b319ad90646d424bb3d3/master/w_668,c_limit/snapchat-ghost.jpg\"\n             },\n           ],\n           memories: [\n             {\n               source: \"https://media.wired.com/photos/5955b319ad90646d424bb3d3/master/w_668,c_limit/snapchat-ghost.jpg\",\n               type: \"big\",\n               title: 'test'\n             },\n           ]\n   },\n    {\n           year: 2012,\n           events: [\n             {\n               title: \"2012\",\n               description: \"\",\n               date: \"\",\n               image: \"\",\n             },\n             {\n               title: \"Facebook\",\n               description: \"goes public, reached 1 billion active users, and acquires Instagram fro $1 billion USD\",\n               date: \"\",\n               image: \"https://www.facebook.com/images/fb_icon_325x325.png\"\n             },\n             {\n               title: \"Twitter\",\n               description: \"hits 140 million active users\",\n               date: \"\",\n               image: \"https://help.twitter.com/content/dam/help-twitter/twitter-logo.png\"\n             },\n             {\n               title: \"Snapchat Stories\",\n               description: \"are introduced. It was one of the biggest feed innovations since the launh of Twitter. Users start sending 60 million snaps per day\",\n               date: \"\",\n               image: \"https://s2.r29static.com/bin/entry/c4c/0,0,2000,2400/720x864,85/1796262/image.webp\"\n             },\n           ],\n           memories: [\n             {\n               source: \"https://media.wired.com/photos/5955b319ad90646d424bb3d3/master/w_668,c_limit/snapchat-ghost.jpg\",\n               type: \"big\",\n               title: 'test'\n             },\n           ]\n   },\n];\n\n","import React from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport TimelineEvent from './components/TimelineEvent';\nimport data from './data';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"curved-div upper\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1440 320\"><path fill=\"#fff\" fill-opacity=\"1\" d=\"M0,64L60,58.7C120,53,240,43,360,85.3C480,128,600,224,720,250.7C840,277,960,235,1080,192C1200,149,1320,107,1380,85.3L1440,64L1440,0L1380,0C1320,0,1200,0,1080,0C960,0,840,0,720,0C600,0,480,0,360,0C240,0,120,0,60,0L0,0Z\"></path></svg>\n    </div>  \n    <div className=\"curved-div\">\n      <Header\n        // imageSource='https://cdn.dribbble.com/users/2705516/screenshots/7091320/dribble-04.jpg'\n        title='Social Media in the last decade'\n        headerStyles={{color: 'white'}} \n        textStyles={{color: 'white', fontSize: '4rem'}}\n      />\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1440 320\"><path fill=\"#fff\" fill-opacity=\"1\" d=\"M0,64L60,58.7C120,53,240,43,360,85.3C480,128,600,224,720,250.7C840,277,960,235,1080,192C1200,149,1320,107,1380,85.3L1440,64L1440,320L1380,320C1320,320,1200,320,1080,320C960,320,840,320,720,320C600,320,480,320,360,320C240,320,120,320,60,320L0,320Z\"></path></svg>\n    </div>  \n      <TimelineEvent\n        data={data}\n        showMemories={false} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}